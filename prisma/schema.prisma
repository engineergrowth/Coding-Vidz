datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String     @unique
  password  String
  role      String     @default("user")
  posts     Post[]
  comments  Comment[]
  votes     Vote[]
  bookmarks Bookmark[]
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  video_url     String      @unique
  description   String      @default("") @db.VarChar(255)
  views         Int         @default(0)
  created_at    DateTime    @default(now())
  user_id       Int
  user          User        @relation(fields: [user_id], references: [id])
  instructor_id Int
  instructor    Instructor  @relation(fields: [instructor_id], references: [id])
  comments      Comment[]
  votes         Vote[]
  bookmarks     Bookmark[]
  tags          TagOnPost[]
}

model Instructor {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  popularity Int         @default(0)
  posts      TagOnPost[]
}

model TagOnPost {
  id      Int  @id @default(autoincrement())
  post_id Int
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tag_id  Int
  tag     Tag  @relation(fields: [tag_id], references: [id])
}

model Comment {
  id         Int      @id @default(autoincrement())
  comment    String
  created_at DateTime @default(now())
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
}

model Vote {
  id         Int      @id @default(autoincrement())
  value      Int // -1 for downvote, 1 for upvote
  created_at DateTime @default(now())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
  @@index([post_id]) // Indexing post_id for faster querying
  @@index([user_id]) // Indexing user_id for faster querying
}

model Bookmark {
  id      Int  @id @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id])
  post_id Int
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
}
