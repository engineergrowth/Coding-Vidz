datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String     @unique
  password  String
  role      String     @default("user")
  posts     Post[] // Users can have multiple posts
  comments  Comment[] // Users can have multiple comments
  reactions Reaction[] // Users can have multiple reactions
  bookmarks Bookmark[] // Users can have multiple bookmarks
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  video_url     String      @unique
  description   String      @default("") @db.VarChar(255)
  views         Int         @default(0)
  created_at    DateTime    @default(now())
  user_id       Int
  user          User        @relation(fields: [user_id], references: [id]) // Relation to User
  instructor_id Int
  instructor    Instructor  @relation(fields: [instructor_id], references: [id]) // Relation to Instructor
  comments      Comment[] // Multiple comments can be associated with a post
  reactions     Reaction[] // Multiple reactions can be associated with a post
  bookmarks     Bookmark[] // Multiple bookmarks can be associated with a post
  tags          TagOnPost[] // Many-to-many relation to Tag via TagOnPost
}

model Instructor {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] // An instructor can have multiple posts
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  popularity Int         @default(0)
  posts      TagOnPost[] // Many-to-many relation to Post via TagOnPost
}

model TagOnPost {
  id      Int  @id @default(autoincrement())
  post_id Int
  post    Post @relation(fields: [post_id], references: [id]) // Relation to Post
  tag_id  Int
  tag     Tag  @relation(fields: [tag_id], references: [id]) // Relation to Tag
}

model Comment {
  id         Int      @id @default(autoincrement())
  comment    String
  created_at DateTime @default(now())
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id]) // Relation to post
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id]) // Relation to user
}

model Reaction {
  id            Int      @id @default(autoincrement())
  reaction_type String
  created_at    DateTime @default(now())
  post_id       Int
  post          Post     @relation(fields: [post_id], references: [id]) // Relation to post
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id]) // Relation to user
}

model Bookmark {
  id      Int  @id @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id]) // Relation to user
  post_id Int
  post    Post @relation(fields: [post_id], references: [id]) // Relation to post

  @@unique([user_id, post_id]) // Ensure a user can only bookmark a post once
}
